# Лекциите започват от 2!

* 2. Въведение в системите за управление на бази от данни
** Данни и информация
   - Данни: стойностите, които се съхраняват в базата данни (конкретни факти)
   - Информация: данни, обработени така, че да бъдат смислени и полезни на потребителя
   - ЗА ИЗПИТ: Данните са това, което съхраняваме, информацията е това, което извличаме
** Данни
   - data modeling (концептуално)
   - data modeling (физически)
   - database
   - data warehouse
** Системи за работа с файлове
   - записват данните в отделни файлове
*** недостатъци
    - данните често се дублират
    - зависимост на данните
    - данните са разделени и съответно изолирани
    - трудно е да се представят сложни обекти
** Предимства на СУБД
   - излишеството на данни може да бъде намалено (дублирането е намалено)
   - неконсистентността на данните може да бъде избегната
   - данните могат да бъдат споделени
   - могат да бъдат наложени стандарти
   - могат да бъдат наложени ограничения с цел сигурност
   - данните са интегрирани
** Основни понятия
   - база данни: комп. система за регистриране и поддържане на логически свързани
     структури от данни
   - БД съдържа: оперативни данни и данни, които описват оперативните (речник,
     каталог, метаданни)
   - потребителите на БД могат да добавят, променят, извличат и трият данни
** Компоненти на една система за управление на база данни
   - хардуер
   - софтуер
   - данни
   - процедури
   - потребители: крайни потребители, приложни програмисти, администратори
** Видове данни
   - оперативни данни
   - входни данни
   - изходни данни
** Независимост на данните
   По-старите системи в повечето случаи са зависими от данните.
   Всяка промяна в структурата на съхранение на данните афектира приложението.
** Видове бази данни
   - Операционни (транзакционни)
   - Аналитични
   - Хибридни
* 3. Архитектура на СУБД
** Три нива на архитектура
   - външно
   - концептуално
   - вътрешно
** Външно ниво
   - най-високо ниво на абстракция
   - най-близо до потребителите
   - занимава се предимно с индивидуалните гледни точки на потребителите
** Концептуално ниво
   - схемата му представя структурата на цялата база данни
   - скрива детайлите относно физическото съхранение на данните
   - концентрира се в/у обектите, връзките, типовете данни, ограниченията
** Вътрешно ниво
   - представя на ниско ниво цялата база данни
   - има вътр. схема, която описва физическата структура на съхраняване на данните
   - най-близо до физическата памет
** Кореспондеции (mappings)
   - кореспонденциите м/у вътрешното и концептуално ниво определят как данните
     на концептуално ниво се представят на физическото
   - кореспонденциите м/у външното и концептуално ниво определят начина на
     представяне на данните от потребителска гледна точка
** Администратор на БД
   - контрол на достъпа до БД
   - увеличаване на хардуерните и софтуерни ресурси при нужда
   - архивиране и възстановяване
   - определя структурата за съхраняване на данните в паметта
** СУБД
*** Управление на речника за данни
    - СУБД съхранява данни за всички обекти, които са създадени в нея
    - предоставя ниво на абстракция, правейки приложенията независими от
      структурата на съхранение на данните
*** Сигурност и интегритет на данните
    - СУБД трябва да следи правата на потребителите за достъп до обектите в нея
    - СУБД може да отхвърля потребителски команди
*** Контрол на едновременния достъп
    - СУБД позволява едновременен достъп на множество потребители до едни и същи
      данни
*** Архивиране и възстановяване
*** Управление на интегритета на данните
*** Езици за достъп до СУБД, API и комуникационни интерфейси
*** Ефективност
** Модели СУБД
   - файлови системи
   - електронни таблици
   - йерархичен модел
   - мрежов модел
   - релационен модел
   - обектен модел
   - обектно-релационен модел
   - XML
   - Други: NoSQL, Deductive, Dimensional
** Релационни системи
   - данните се съхраняват в двумерни таблици, наречени релации
** Клиент/Сървър архитектура
* 4. Обща характеристика на релационните СУБД
Основата на модерните технологии за БД безспорно е релационният модел.
** Правила на Код за оценяване на релационна система
   - правило за информацията
   - гарантиран достъп
   - систематична поддръжка на нулеви стойности
   - активен онлайн релационен каталог
   - пълен подезик за данните
   - правила за обновяване на изгледите
   - вмъкване, обновяване и изтриване на ниво множество
   - физическа независимост на данните
   - логическа независимост на данните
   - независимост на цялостността на данните
   - независимост на разпределението
   - невъзможност за намеса
   - zero rule
** Релационен модел на данните
   - използва колекция от таблици
   - таблиците са логически структури, поддържани от мениджъра на базата данни
** Части на релационния модел
   - структурна част
   - правила за цялостност на данните
   - манипулативна част
** Изводи
   - резултатът от join на две таблици е нова таблица
   - това свойство се нарича затвореност
   - таблиците са логически структури, не физически
   - всички стойности са атомарни
* 5. Области (домейни)
Най-малката семантична единиц данни в релационния модел е индивидуална стойност
на данни - напр. ISBN номер на книга.
** Област - именувано множество от скаларни стойности, всички от един и същ тип
   - областта е множеството от всички възможни стойности, които дадени атрибути
     могат да имат
   - областите са един вид пулоев от стойности, от които се вземат актуалните
     стойности на атрибутите
   - областите са от концептуално естество
** Съставни области
   - една съставна област е дефинирана като Декартово произведение на множество
     от прости области
* 6. Релации
** Определения
   - релационна променлива: променлива в смисъла на езиците за програмиране;
     именуван обект, стойността на който се променя във времето
   - една релация се състои от заглавна част и тяло
   - заглавна част: състои се от фиксирано множество от атрибути, които са под-
     редени двойки във вид: (атрибут:домейн)
   - тяло: състои се от множество от n-торки (наредени множества)
     - всяка n-торка се състои от едно множество от двойки във вид:
       (име_атрибут:стойност_атрибут)
** Свойства на релациите
   - няма дублирани записи: релацията не може да съдържа дублиращи се n-торки
   - записите са неподредени (top to bottom)
   - атрибутите са неподредени
   - всички стойности на атрибутите са атомарни
** Видове релации
   - именувани релации
   - дериватни релации
   - базови релации
   - views (гледни точки)
   - snapshots (моментни снимки)
   - query results (резултати от въпроси, запитвания)
* 7. Концепция за ключове
Това е компонентът на релационния модел, който през последните години е най-много
променян.
** Въведение
   - дефиницията за БД трябва да включва правила за цялостност
   - релационният модел включва два типа общовалидни правила за цялостност:
     - концепцията за първични ключове
     - концепцията за външни ключове
** Концепция за ключове
   - ключ е атрибут или група от атрибути, който се използва за идентификация на
     n-торка (ред) в релация
*** Неформални определения
    1. Суперключ
    2. Кандидат-ключ
    3. Първичен ключ
    4. Външен ключ
* 8. Външни ключове
** Свойства
   - ВК са също множества от атрибути
   - един ВК може да бъде съставен само ако кореспондиращият КК е също съставен
   - ако КК е прост - ВК също ще е прост
   - ВК трябва да е стойност, която се появява като стойност на съответния КК
** Изтриване на ВК
   - RESTRICTED - операцията е ограничена само за случая, когато няма свързани
     данни; ако има такива, изтриване не се извършва
   - CASCADES - операцията се разширява каскадно и изтрива също така и свърза-
     ните записи
** Промяна на ВК
   - RESTRICTED - операцията е ограничена само за случая, когато няма свързани
     данни; ако има такива, промяна не се извършва
   - CASCADES - операцията се разширява каскадно и променя също така и свърза-
     ните записи   
* 9. Нулеви стойности
Нулева стойност: липса на стойност (данни).
** Правило за цялостност на обект
   - не се разрешава на нито един от компонентите на ПК да приема нулеви стойности
** Забележки
   - в една релационна БД ние не трябва да записваме информация, която не можем
     да идентифицираме
   - правилото по-горе важи само за базови релации
   - правилото се прилага само за ПК - АК могат да имат NULL стойности, но тези,
     които имат, не могат да бъдат избирани за ПК
** ВК и NULL
   - външните ключове също могат да приемат нулеви стойности
   - NULLIFIES
     - при изтриване на ред от целевата релация, който се референцира, ВК
       получава стойност NULL
     - същото важи и за промяната
** Релационен интегритет - обобщение
Интегритетът на данните предоставя механизъм за поддържане на консистентността
на данните за операциите INSERT, UPDATE и DELETE.
*** Друг тип ограничения за интегритет на данните са:
    - цялостност на обект
    - поддръжка на нулеви стойности
    - ограничения, свързани с областите
    - референциален интегритет
* 10. Релационна алгебра
Третата и последна част на релационния модел (манипулативната част) се състои от
множество от оператори, които образуват т. нар. релационна алгебра. Всеки оператор
от релационната алгебра има една или две релации като входни данни и връща като ре-
зултат една нова релация. Codd дефинира 8 операции, разделени в две групи:
   - множество на традиционните (класическите) операции;
   - специални релационни опрации.
** Затвореност
   Резултатът на всяка релационна операция е друга релация - това свойство се
   нарича релационна затвореност.
   - всеки изход от една операция може да бъде вход на друга операция
   - затвореността има два аспекта:
     - затвореност на заглавните части на релациите
     - затвореност на телата на релациите
   - релациите, които са резултат от някаква релационна операция, също имат
     заглавна част
   - RENAME - преименува атрибути в специфицираната релация
** Класически релационни оператори
   - обединение (UNION)
   - сечение (INTERSECTION)
   - разлика (DIFFERENCE)
   - произведение (CROSS-PRODUCT)
   - всички те са бинарни (всяка операция има два операнда)
** Специални релационни оператори
   - ограничение (избор) - SELECTION; RESTRICTION - унарен
   - проекция (PROJECTION) - унарен
   - естествено сливане (JOIN) - бинарен
   - частно (DIVISION) - бинарен
** Съвместимост на типове
   - обединението на две релации е специален случай, който изисква двете входни
     релации да бъдат от един и същи тип
   - това значи те да имат идентични заглавни части
   - съвместимост на типове се изисква за операторите:
     - обединие
     - сечение
     - разлика
** Разширение и сумиране
   - алгебрични оператори, допълнение на тези на д-р Codd:
     - EXTEND
     - SUMMARIZE
* 11. Релационен език SQL
SQL e конкретна реализация на релационния модел. Той се поддържа от повечето 
развойни системи, които са днес на пазара.
** Класификация на операторите в SQL
   - DDL (Data Definition Language)
     - CREATE
     - ALTER
     - DROP
   - DML (Data Manipulation Language)
     - INSERT
     - UPDATE
     - DELETE
     - SELECT
   - DCL (Data Control Language)
     - GRANT
     - REVOKE
** Домейни
   - SQL домейните се различават значително от тези на релационния модел
** Базови таблици - създават се с CREATE TABLE
* 12. Функционални зависимости
С тази лекция се започва въведение в проектирането на бази данни.
Основно две са взаимносвързаните концепции:
   - функционални зависимости;
   - теория на нормализацията.
** Основни понятия
   - функционалните зависимости са взаимоотношенията м/у атрибути в една релация
   - ако знаем стойността на една комбинация от полета от опрелен запис, то
     можем да намерим стойностите на други полета от същия запис
   - всички атрибути в една релация задължително трябва да зависят от ПК
** Тривиални зависимости
   - един очевиден начин да се редуцира обема на множеството на ФЗ е да елими-
     нираме тривиалните зависимости
   - тривиална зависимост: ФЗ е тривиална, ако дясната страна е подмножество на
     лявата
** Видове функционални зависимости
   - пълна функционална зависимост
   - частична функционална зависимост
   - транзитивна функционална зависимост
** Затвореност на множество от ФЗ
   - множеството на всички ФЗ, които следват от едно дадено множество S от ФЗ,
     се нарича затвореност на S и се означава с S+
** Затвореност на множество от атрибути
** Несъкратимо множество от ФЗ
   - дясната страна на всяка ФЗ в S включва точно един атрибут
   - лявата страна на всяка ФЗ в S е несъкратима по ред
   - никоя ФЗ в S не може да бъде отстранена от S без да промени затвореността ѝ
* 13. Теория на нормализацията
Въпросът, на който ще търсим отговор в този раздел, е как да представим дадена
съвкупност от данни в БД. По-прецизно:
   - Какви релации са необходими?
   - Какви атрибути и взаимоотношения ще имат те?
** Нормализация - процес на подреждане на данните в релации
   - базира се на анализ на функционалните зависимости м/у атрибутите
   - тя е процесът на декомпозиране на релации с аномалии в по-добре структурирани
     такива
   - нормализацията трябва да премане излишеството, но не и за сметка на интегритета
** Цели на нормализацията
   1. Да избягва излишеството като съхранява всеки факт в базата данни веднъж
   2. Да постави данните във форма, която е по-удачна за акуратната им промяна
   3. Да избягва някои "аномалии на промените"
   4. Да улесни прилагането на ограниченията върху данните
   5. Да избягва ненужно програмиране
** Нормални форми
   Теорията на нормализацията се изгражда около концепцията за нормални форми.
   Нормална форма - една добре дефинирана стандартна мярка за степента на норма-
   лизация, която една релация притежава. Нормализацията се извършва на степени -
   всяка следваща нормална форма означава по-висока степен на нормализация.
   Възжможно е да се стигне до свръхнормализация (нежелателна).
** Декомпозиция без загуба на информация
   - включва декомпозиция на дадена входна релация на нови релации
   - изисква се тя да бъде обратима - при този процес да не се губи информация
   - проблемът за загуба на информация - свързан е с ФЗ
** Първа нормална форма
   - една релация е в ПНФ (1NF), ако всички стойности на данните са атомарни
** Аномалии на промените
   Промяната на данните в някои релации може да доведе до нежелателни последствия -
   наречени аномалии на промените.
** Втора нормална форма
   - една релация е във ВНФ (2NF), ако тя е в 1NF и всеки неключов атрибут е
     несъкратимо зависим от първичния ключ, т.е. зависи от целия ПК
** Трета нормална форма
   - една релация е в ТНФ (3NF), ако тя е във 2NF и всеки неключов атрибут е
     нетранзитивно зависим от ПК
** Нормална форма на Boyce-Codd
   - оригиналната дефиниция на Codd за 3NF страда от някои неадекватности
   - по-точно не е удовлетворителна в случаите, когато една релация:
     - има повече от един ключ-кандидат
     - някои от ключовете-кандидати са съставни
     - ключовете-кандидати се препокриват - имат поне един общ атрибут
   - една релация е в нормална форма на Boyce-Codd, ако:
     - всяка нетривиална, ляво-несъкратима ФЗ има ключ-кандидат като детерминант
     - всеки детерминант е ключ-кандидат
** Четвърта нормална форма
   - една релация е в ЧНФ (4NF), ако тя е в BCNF и не съдържа мулти-стойностни
     зависимости
** Пета нормална форма
   - една релация е в ПНФ (5NF), ако всяка нетривиална JOIN зависимост, която е
     в сила за релацията, се базира на кандидат-ключовете на релацията
** Domain/Key нормална форма
   - една релация е в D/K нормална форма, ако всяко ограничение в релацията е
     логическо следствие от ограниченията за домейни и ключове, приложени в
     релацията
** Практически правила за съставяне на релации
   В този раздел се опитваме да открием най-добрия начин да групираме атрибутите
   в релации. Резултатните релации трябва да удовлетворяват две изисквания:
      - те трябва да съдържат необходимите данни за конструиране на обекта, който
        представят
      - не трябва да възнкват аномалии на промените при манипулиране на данните им
      - отношение "едно–към-едно"
        - ако А определя Б и Б определя А, тогава стойностите на тези атрибути са в
          отношение едно-към-едно
      - отношение "много-към-едно"
        - ако атрибутът А определя Б, но Б не определя А, тогава отношението м/у
          стойностите им е много-към-едно
      - отношение "много-към-много"
        - ако А не определя Б и Б не определя А, тогава отношението м/у стойнос-
          тите им е много-към-много
** Техники на денормализация
   1. Съхраняване на стойности, които биха могли да бъдат извлечени
   2. Pre-Joining на таблици
   3. Hard-Coded стойности
   4. Запазване на детайлите в основната таблица
   5. Повтаряне на единичен детайл в основната релаця
   6. Short-Circuit ключове
* 14. Конкурентност
Конкурентността и възстановяването са тясно свързани. Те са част от общата тема
за обработка на транзакциите.
** Транзакция - логическа единица за операция в/у БД
   - при обработка на транзакции промени, при които възнкват грешки, се анулират
     преди транзакцията да достигне естествения си край
   - следователно, една транзакция се изпълнява изцяло или се анулира напълно
   - системният компонент, който реализира този механизъм, се нарича transaction
     manager
** Транзакционни оператори
   - BEGIN TRANSACTION - поставя началото на транзакция
   - COMMIT TRANSACTION - сигнализира за успешен край на транзакцията
   - ROLLBACK TRANSACTION - сигнализира за неуспешен край на транзакцията
** Свойства на транзакциите
   - атомарност
   - консистентност
   - изолираност
   - трайност
** Конкурентност - едновременен достъп на повече от една транзакция до едни и същи данни
** Проблеми на конкурентността
   - загуба на промяната
   - незавършена зависимост
   - неконсистентен анализ
   - четене на редове-фантоми
** Блокиране
   - основна идея - когато една транзакция изисква увереност, че един обект няма
     да бъде променен по някакъв непредвидим начин, тя блокира този обект
** Deadlock
   - ситуация, в която две или повече транзакции са едновременно в състояние
     на изчакване, като при това всяка от тях може да продължи едва когато
     другата първа предприеме определено действие
   - избор на транзакция-жертва
     Когато е открита deadlock ситуация, изборът за това коя транзакция да бъде
     прекъсната може да бъде направен по няколко критерия:
     - тази с най-малко заключвания
     - тази, извършила най-малко работа до момента
     - тази, която е най-далеч от приключване на своята работа
* 15. Възстановяване
* 16. Сигурност
